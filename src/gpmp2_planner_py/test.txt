# gpmp2_plan.problem.start_conf = np.asarray([0, 0, 0, 0, 0, 0])
    # gpmp2_plan.problem.goal_conf = np.asarray([2.0944, 0.4363, 1.5708, -2.0071, -2.0944, 0])
    # # gpmp2_plan.plan_flag = 1
    # # gpmp2_plan.plan()
    # batch_values = Values()
    # alpha = [np.pi / 2, 0, 0, np.pi / 2, -np.pi / 2, 0]
    # alpha = np.asarray(alpha)
    # a = [0, -0.427, -0.357, 0, 0, 0]
    # a = np.asarray(a)
    # d = [0.147, 0, 0, 0.141, 0.116, 0.105]
    # d = np.asarray(d)
    # base_pose = Pose3(Rot3(np.eye(3)), Point3(np.asarray([0, 0, 0])))
    # theta = [0, -np.pi / 2, 0, -np.pi / 2, 0, 0]
    # theta = np.asarray(theta)
    # abstract_arm = Arm(6, a, alpha, d, base_pose, theta)
    # spheres_data = [[0, 0.0, - 0.1,  0.00, 0.08],
    #                 [0, 0.0,  0.0,  0.00, 0.08],
    #                 [1, 0.0,  0.0,  0.10, 0.06],
    #                 [1, 0.105,  0.0,  0.10, 0.06],
    #                 [1, 0.210,  0.0, 0.10,  0.06],
    #                 [1, 0.315,  0.0, 0.10, 0.06],
    #                 [1, 0.420,  0.0, 0.10, 0.06],
    #                 [1, 0.0,  0.0,  0.00, 0.08],
    #                 [2, 0.11, - 0.0,  0.00, 0.06],
    #                 [2, 0.22,  0.0,  0.00, 0.06],
    #                 [2, 0.0,  0.0, 0.00, 0.08],
    #                 [3, 0.0,  0.0,  0.00, 0.07],
    #                 [4, 0.0,  0.00,  0.00, 0.06],
    #                 [5, 0.0,  0.0,  0.00, 0.06],
    #                 ]
    # spheres_data = np.asarray(spheres_data)
    # nr_body = spheres_data.shape[0]
    # sphere_vec = BodySphereVector()
    # for i in range(nr_body):
    #     sphere_vec.push_back(
    #         BodySphere(
    #             spheres_data[i, 0], spheres_data[i, 4], Point3(spheres_data[i, 1:4])
    #         )
    #     )
    # arm_model = ArmModel(abstract_arm, sphere_vec)
    # sdf = SignedDistanceField()
    # sdf.loadSDF('/home/robert/test.bin')
    # start_conf = gpmp2_plan.problem.start_conf
    # end_conf = gpmp2_plan.problem.goal_conf
    # start_vel = np.zeros(6)
    # end_vel = np.zeros(6)
    # init_values = initArmTrajStraightLine(start_conf, end_conf, gpmp2_plan.problem.total_step - 1)
    # print init_values
    # total_time = 10.0
    # total_time_step = 9
    # total_check_step = 90
    # delta_t = total_time / total_time_step
    # check_inter = total_check_step / total_time_step - 1
    # Qc = 1.0 * np.eye(6)
    # cost_sigma = 0.02
    # epsilon_dist = 0.2
    # pose_fix_sigma = 0.00001
    # vel_fix_sigma = 0.00001
    # opt_setting = TrajOptimizerSetting(6)
    # opt_setting.set_total_step(total_time_step)
    # opt_setting.set_total_time(total_time)
    # opt_setting.set_epsilon(epsilon_dist)
    # opt_setting.set_cost_sigma(cost_sigma)
    # opt_setting.set_obs_check_inter(check_inter)
    # opt_setting.set_conf_prior_model(pose_fix_sigma)
    # opt_setting.set_vel_prior_model(vel_fix_sigma)
    # opt_setting.set_Qc_model(Qc)
    # opt_setting.setLM()
    # gpmp2_plan.traj.initializeTrajectory(gpmp2_plan.init_values, gpmp2_plan.problem)
    # gpmp2_plan.init_values.print_("Init Values")
    # batch_values = BatchTrajOptimize3DArm(gpmp2_plan.problem.robot.arm, gpmp2_plan.problem.sdf, gpmp2_plan.problem.start_conf, np.zeros(6),
    #                                       gpmp2_plan.problem.goal_conf, np.zeros(6), gpmp2_plan.init_values, gpmp2_plan.problem.opt_setting)
    # print batch_values
