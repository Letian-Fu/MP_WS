/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-03-06 21:04:42.857113
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((4.3e-7)*x2);
x13=((0.116)*x4);
x14=((1.0)*x6);
x15=((0.116)*x0);
x16=((4.3e-7)*x10);
x17=((1.0)*x10);
x18=((1.0)*x9);
x19=((0.105)*x5);
x20=((4.3e-7)*x0);
x21=((1.0)*x5);
x22=((4.3e-7)*x4);
x23=((1.0)*x0);
x24=((0.105)*x6);
x25=((0.357)*x0);
x26=((1.0)*x4);
x27=(x1*x2);
x28=(x10*x3);
x29=(x1*x4);
x30=(x10*x9);
x31=(x2*x3);
x32=(x0*x3);
x33=(x1*x10);
x34=(x3*x4);
x35=(x0*x1);
x36=(x11*x23);
x37=(x23*x34);
x38=(x17*x34);
x39=((((-1.0)*x27))+x34);
x40=((((-1.0)*x31))+(((-1.0)*x1*x26)));
x41=(x0*((x31+x29)));
x42=(((x2*x28))+((x10*x29)));
x43=(x37+(((-1.0)*x23*x27)));
x44=((((-1.0)*x17*x27))+x38);
x45=(x44*x6);
x46=(((x5*((x31+x29))))+((x39*x6)));
x47=((((-1.0)*x14*x40))+(((-1.0)*x21*x39)));
x48=(((x5*(((((-1.0)*x37))+((x0*x27))))))+((x41*x6)));
x49=(((x42*x6))+((x5*(((((-1.0)*x38))+((x10*x27)))))));
x50=(((x41*x5))+((x43*x6)));
x51=(((x42*x5))+x45);
x52=(x50*x9);
eerot[0]=(((x7*((x52+((x10*x11))))))+((x48*x8)));
eerot[1]=(((x8*(((((-1.0)*x18*x50))+(((-1.0)*x11*x17))))))+((x48*x7)));
eerot[2]=(((x11*(((((-1.0)*x14*x43))+(((-1.0)*x21*x41))))))+x30);
IkReal x53=((1.0)*x15);
IkReal x54=((1.0)*x29);
eetrans[0]=((((-0.427)*x32))+(((0.105)*x30))+((x11*(((((-1.0)*x19*x41))+(((-1.0)*x24*x43))))))+(((-1.0)*x25*x54))+(((0.141)*x10))+((x6*(((((-1.0)*x20*x34))+((x12*x35))))))+(((-1.0)*x25*x31))+((x5*(((((-1.0)*x12*x32))+(((-1.0)*x20*x54))))))+((x5*(((((-1.0)*x27*x53))+((x13*x32))))))+((x6*(((((-1.0)*x31*x53))+(((-1.0)*x13*x35))))))+(((2.07e-6)*x35)));
eerot[3]=(((x7*(((((-1.0)*x36))+((x51*x9))))))+((x49*x8)));
eerot[4]=(((x49*x7))+((x8*(((((-1.0)*x18*x51))+x36)))));
eerot[5]=((((-1.0)*x0*x18))+((x11*(((((-1.0)*x14*x44))+(((-1.0)*x21*x42)))))));
IkReal x55=((1.0)*x16);
IkReal x56=(x2*x28);
eetrans[1]=((((-0.105)*x0*x9))+(((-0.357)*x56))+((x11*(((((-1.0)*x19*x42))+(((-1.0)*x24*x44))))))+((x5*(((((-1.0)*x12*x28))+(((-1.0)*x29*x55))))))+((x6*(((((-1.0)*x34*x55))+((x12*x33))))))+((x6*(((((-0.116)*x56))+(((-1.0)*x13*x33))))))+(((2.07e-6)*x33))+(((-0.427)*x28))+(((-0.357)*x10*x29))+(((-0.141)*x0))+((x5*(((((-0.116)*x10*x27))+((x13*x28)))))));
eerot[6]=(((x7*x9*((((x40*x6))+((x39*x5))))))+((x46*x8)));
eerot[7]=(((x47*x8*x9))+((x46*x7)));
eerot[8]=(x11*x47);
IkReal x57=((1.0)*x3);
eetrans[2]=((0.147)+(((0.357)*x27))+((x11*(((((-1.0)*x24*x40))+(((-1.0)*x19*x39))))))+(((0.427)*x1))+((x5*((((x1*x12))+(((-1.0)*x22*x57))))))+((x5*(((((-1.0)*x1*x13))+(((-0.116)*x31))))))+((x6*(((((-1.0)*x13*x57))+(((0.116)*x27))))))+((x6*((((x1*x22))+((x12*x3))))))+(((2.07e-6)*x3))+(((-0.357)*x34)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.105)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-0.105)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.147)+(((-0.105)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x58=((1.0)*px);
IkReal x59=((1.0)*pz);
IkReal x60=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x60))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x59)));
rxp0_2=((((-1.0)*r10*x58))+((py*r00)));
rxp1_0=((((-1.0)*r21*x60))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x59)));
rxp1_2=((((-1.0)*r11*x58))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x60)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x59)));
rxp2_2=((((-1.0)*r12*x58))+((py*r02)));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x63 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x63.valid){
continue;
}
IkReal x61=((1.0)*(x63.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x64=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x64.valid){
continue;
}
if( (((0.141)*(x64.value))) < -1-IKFAST_SINCOS_THRESH || (((0.141)*(x64.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x62=IKasin(((0.141)*(x64.value)));
j0array[0]=(x62+(((-1.0)*x61)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x61))+(((-1.0)*x62)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x65=cj0*cj0;
IkReal x66=r01*r01;
IkReal x67=r00*r00;
IkReal x68=(r00*sj0);
IkReal x69=((8.0)*cj0);
IkReal x70=(r01*sj0);
IkReal x71=((1.0)*cj0);
IkReal x72=((4.0)*x67);
IkReal x73=((4.0)*x66);
IkReal x74=((4.0)*x65);
CheckValue<IkReal> x79=IKPowWithIntegerCheck((x70+(((-1.0)*r11*x71))),-1);
if(!x79.valid){
continue;
}
IkReal x75=x79.value;
IkReal x76=(x68*x75);
CheckValue<IkReal> x80=IKPowWithIntegerCheck(((((-1.0)*cj0*r11))+x70),-1);
if(!x80.valid){
continue;
}
IkReal x77=(r10*x71*(x80.value));
if((((((-1.0)*r10*x68*x69))+((x74*(r10*r10)))+(((-1.0)*r11*x69*x70))+x73+x72+((x74*(r11*r11)))+(((-1.0)*x65*x72))+(((-1.0)*x65*x73)))) < -0.00001)
continue;
IkReal x78=((0.5)*x75*(IKsqrt(((((-1.0)*r10*x68*x69))+((x74*(r10*r10)))+(((-1.0)*r11*x69*x70))+x73+x72+((x74*(r11*r11)))+(((-1.0)*x65*x72))+(((-1.0)*x65*x73))))));
j5array[0]=((2.0)*(atan(((((-1.0)*x77))+x76+x78))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((-2.0)*(atan(((((-1.0)*x76))+x77+x78))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

{
IkReal j3eval[1];
j3eval[0]=((((0.5)*(IKabs(((-0.0207910940222103)+(((-1.02833556002417)*cj5*pp*r01*sj0))+(((-1.02833556002417)*pp*r00*sj0*sj5))+(((5.3062114897247e-7)*cj0*cj5*rxp1_1))+(((-2.05667112004833)*cj0*cj5*npy*py))+(((0.6170013360145)*pp))+(((2.05667112004833)*npx*px*sj0*sj5))+(((1.02833556002417)*cj0*pp*r10*sj5))+(((-5.3062114897247e-7)*cj5*rxp1_0*sj0))+(((-2.05667112004833)*cj0*npx*py*sj5))+(((-5.3062114897247e-7)*rxp0_0*sj0*sj5))+(((1.02833556002417)*cj0*cj5*pp*r11))+(((5.3062114897247e-7)*cj0*rxp0_1*sj5))+(((2.05667112004833)*cj5*npy*px*sj0)))))))+(((0.5)*(IKabs(((-0.105115585769461)+(((-6.2721176001474e-7)*cj5*rxp1_0*sj0))+(((6.2721176001474e-7)*cj0*rxp0_1*sj5))+(((0.72931600001714)*pp))+(((-6.2721176001474e-7)*rxp0_0*sj0*sj5))+(((-0.351530312008261)*cj5*npy))+(((6.2721176001474e-7)*cj0*cj5*rxp1_1))+(((-0.351530312008261)*npx*sj5)))))))+(((0.5)*(IKabs(((8.95658393301049e-7)+(((-2.08292649604895)*cj5*rxp1_0*sj0))+(((2.08292649604895)*cj0*cj5*rxp1_1))+(((-2.08292649604895)*rxp0_0*sj0*sj5))+(((2.08292649604895)*cj0*rxp0_1*sj5)))))))+(((0.5)*(IKabs(((-0.0737272837667032)+(((1.02833556002417)*cj5*npy))+(((1.02833556002417)*npx*sj5))+(((-1.88163528004422e-6)*cj5*rxp1_0*sj0))+(((1.88163528004422e-6)*cj0*cj5*rxp1_1))+(((-1.88163528004422e-6)*rxp0_0*sj0*sj5))+(((2.18794800005142)*pp))+(((1.88163528004422e-6)*cj0*rxp0_1*sj5)))))))+(IKabs(((1.26287833455448e-7)+(((0.293692635942902)*cj0*cj5*rxp1_1))+(((0.293692635942902)*cj0*rxp0_1*sj5))+(((-0.293692635942902)*rxp0_0*sj0*sj5))+(((-0.293692635942902)*cj5*rxp1_0*sj0)))))+(IKabs(((4.47829196650524e-7)+(((1.04146324802448)*cj0*rxp0_1*sj5))+(((-1.04146324802448)*rxp0_0*sj0*sj5))+(((-1.04146324802448)*cj5*rxp1_0*sj0))+(((1.04146324802448)*cj0*cj5*rxp1_1)))))+(((0.5)*(IKabs(((-0.054859439791587)+(((5.3062114897247e-7)*cj0*cj5*rxp1_1))+(((0.6170013360145)*pp))+(((0.026255376000617)*cj0*cj5*npy*py))+(((0.0131276880003085)*cj5*pp*r01*sj0))+(((-5.3062114897247e-7)*cj5*rxp1_0*sj0))+(((-0.0131276880003085)*cj0*cj5*pp*r11))+(((0.026255376000617)*cj0*npx*py*sj5))+(((-5.3062114897247e-7)*rxp0_0*sj0*sj5))+(((0.0131276880003085)*pp*r00*sj0*sj5))+(((-0.026255376000617)*cj5*npy*px*sj0))+(((-0.026255376000617)*npx*px*sj0*sj5))+(((5.3062114897247e-7)*cj0*rxp0_1*sj5))+(((-0.0131276880003085)*cj0*pp*r10*sj5)))))))+(((0.5)*(IKabs(((-0.194537020537542)+(((-0.0131276880003085)*cj5*npy))+(((-1.88163528004422e-6)*cj5*rxp1_0*sj0))+(((1.88163528004422e-6)*cj0*cj5*rxp1_1))+(((-1.88163528004422e-6)*rxp0_0*sj0*sj5))+(((2.18794800005142)*pp))+(((1.88163528004422e-6)*cj0*rxp0_1*sj5))+(((-0.0131276880003085)*npx*sj5)))))))+(((0.5)*(IKabs(((2.52575666910896e-7)+(((-0.587385271885804)*cj5*rxp1_0*sj0))+(((-0.587385271885804)*rxp0_0*sj0*sj5))+(((0.587385271885804)*cj0*rxp0_1*sj5))+(((0.587385271885804)*cj0*cj5*rxp1_1)))))))+(((0.5)*(IKabs(((-0.0296425951869879)+(((0.703060624016523)*cj0*npx*py*sj5))+(((-0.351530312008261)*cj0*cj5*pp*r11))+(((-0.703060624016523)*npx*px*sj0*sj5))+(((0.351530312008261)*pp*r00*sj0*sj5))+(((-0.351530312008261)*cj0*pp*r10*sj5))+(((0.205667112004833)*pp))+(((-1.76873716324157e-7)*cj5*rxp1_0*sj0))+(((-0.703060624016523)*cj5*npy*px*sj0))+(((1.76873716324157e-7)*cj0*rxp0_1*sj5))+(((0.703060624016523)*cj0*cj5*npy*py))+(((-1.76873716324157e-7)*rxp0_0*sj0*sj5))+(((1.76873716324157e-7)*cj0*cj5*rxp1_1))+(((0.351530312008261)*cj5*pp*r01*sj0))))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2, j3, j4]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j3evalpoly[1];
IkReal x81=((2.18794800005142)*pp);
IkReal x82=((0.72931600001714)*pp);
IkReal x83=((1.04146324802448)*cj5);
IkReal x84=(rxp1_0*sj0);
IkReal x85=(npx*sj5);
IkReal x86=(cj5*npy);
IkReal x87=(cj0*rxp1_1);
IkReal x88=((1.88163528004422e-6)*cj5);
IkReal x89=((2.08292649604895)*cj5);
IkReal x90=((6.2721176001474e-7)*cj5);
IkReal x91=(rxp0_0*sj0*sj5);
IkReal x92=(cj0*rxp0_1*sj5);
IkReal x93=(x87*x88);
IkReal x94=((1.88163528004422e-6)*x92);
IkReal x95=(x84*x88);
IkReal x96=((1.88163528004422e-6)*x91);
IkReal x97=((6.2721176001474e-7)*x92);
IkReal x98=(x87*x90);
IkReal x99=((6.2721176001474e-7)*x91);
IkReal x100=(x84*x90);
IkReal x101=(x95+x96);
IkReal x102=(x100+x99);
IkReal x103=(x81+x93+x94);
IkReal x104=(x82+x98+x97);
IkReal x105=((4.47829196650524e-7)+(((-1.04146324802448)*x91))+(((-1.0)*x83*x84))+(((1.04146324802448)*x92))+((x83*x87)));
op[0]=((-0.105115585769461)+(((-0.351530312008261)*x85))+(((-0.351530312008261)*x86))+(((-1.0)*x102))+x104);
op[1]=x105;
op[2]=((-0.194537020537542)+(((-1.0)*x101))+x103+(((-0.0131276880003085)*x85))+(((-0.0131276880003085)*x86)));
op[3]=((8.95658393301049e-7)+(((2.08292649604895)*x92))+(((-2.08292649604895)*x91))+(((-1.0)*x84*x89))+((x87*x89)));
op[4]=((-0.0737272837667032)+(((-1.0)*x101))+x103+(((1.02833556002417)*x85))+(((1.02833556002417)*x86)));
op[5]=x105;
op[6]=((0.0156941510013786)+(((-1.0)*x102))+(((0.689932936016214)*x85))+(((0.689932936016214)*x86))+x104);
polyroots6(op,zeror,numroots);
IkReal j3array[6], cj3array[6], sj3array[6], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[6]={true,true,true,true,true,true};
_nj3 = 6;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

IkReal x106=((0.6170013360145)*pp);
IkReal x107=((0.205667112004833)*pp);
IkReal x108=(cj0*cj5);
IkReal x109=((1.37986587203243)*npy);
IkReal x110=(sj0*sj5);
IkReal x111=((0.703060624016523)*px);
IkReal x112=(cj5*sj0);
IkReal x113=(pp*r01);
IkReal x114=(pp*r00);
IkReal x115=(pp*r11);
IkReal x116=(cj0*sj5);
IkReal x117=(pp*r10);
IkReal x118=(npy*py);
IkReal x119=(npy*px);
IkReal x120=(npx*py);
IkReal x121=(npx*px);
IkReal x122=((5.3062114897247e-7)*rxp1_1*x108);
IkReal x123=((5.3062114897247e-7)*rxp0_1*x116);
IkReal x124=((5.3062114897247e-7)*rxp1_0*x112);
IkReal x125=((5.3062114897247e-7)*rxp0_0*x110);
IkReal x126=((1.76873716324157e-7)*rxp0_1*x116);
IkReal x127=((1.76873716324157e-7)*rxp1_1*x108);
IkReal x128=((1.76873716324157e-7)*rxp1_0*x112);
IkReal x129=((1.76873716324157e-7)*rxp0_0*x110);
IkReal x130=(x128+x129);
IkReal x131=(x124+x125);
IkReal x132=(x126+x127+x107);
IkReal x133=(x122+x123+x106);
IkReal x134=((1.26287833455448e-7)+(((0.293692635942902)*rxp0_1*x116))+(((0.293692635942902)*rxp1_1*x108))+(((-0.293692635942902)*rxp0_0*x110))+(((-0.293692635942902)*rxp1_0*x112)));
j3evalpoly[0]=((0.00442575058238877)+(((1.37986587203243)*x110*x121))+(((htj3*htj3)*(((-0.0207910940222103)+(((-1.02833556002417)*x110*x114))+(((2.05667112004833)*x112*x119))+(((-1.02833556002417)*x112*x113))+(((-2.05667112004833)*x116*x120))+x133+(((2.05667112004833)*x110*x121))+(((-1.0)*x131))+(((1.02833556002417)*x108*x115))+(((-2.05667112004833)*x108*x118))+(((1.02833556002417)*x116*x117))))))+((x134*(htj3*htj3*htj3*htj3*htj3)))+((px*x109*x112))+x132+(((htj3*htj3*htj3*htj3)*(((-0.054859439791587)+(((-0.026255376000617)*x110*x121))+(((0.026255376000617)*x116*x120))+(((0.0131276880003085)*x110*x114))+x133+(((-1.0)*x131))+(((-0.0131276880003085)*x116*x117))+(((0.0131276880003085)*x112*x113))+(((-0.026255376000617)*x112*x119))+(((-0.0131276880003085)*x108*x115))+(((0.026255376000617)*x108*x118))))))+(((-0.689932936016214)*x110*x114))+(((0.689932936016214)*x116*x117))+(((0.689932936016214)*x108*x115))+(((-1.0)*x130))+(((-1.37986587203243)*x116*x120))+(((htj3*htj3*htj3*htj3*htj3*htj3)*(((-0.0296425951869879)+(((0.703060624016523)*x116*x120))+(((-0.351530312008261)*x116*x117))+(((0.351530312008261)*x110*x114))+(((-1.0)*npx*x110*x111))+x132+(((0.351530312008261)*x112*x113))+(((-1.0)*x130))+(((-1.0)*npy*x111*x112))+(((0.703060624016523)*x108*x118))+(((-0.351530312008261)*x108*x115))))))+(((-1.0)*py*x108*x109))+(((-0.689932936016214)*x112*x113))+(((htj3*htj3*htj3)*(((2.52575666910896e-7)+(((0.587385271885804)*rxp0_1*x116))+(((-0.587385271885804)*rxp1_0*x112))+(((-0.587385271885804)*rxp0_0*x110))+(((0.587385271885804)*rxp1_1*x108))))))+((htj3*x134)));
if( IKabs(j3evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x135=(rxp1_0*sj0);
IkReal x136=((1.1353103455574e-5)*cj5);
IkReal x137=(cj3*npy);
IkReal x138=(cj0*rxp0_1);
IkReal x139=(cj0*rxp1_1);
IkReal x140=(rxp0_0*sj0);
IkReal x141=((2.34192037465222)*cj3);
IkReal x142=(sj3*sj5);
IkReal x143=((2.34192037465222)*cj5*sj3);
IkReal x144=((1.1353103455574e-5)*cj3*sj5);
IkReal x145=(npx*x142);
IkReal x146=(x140*x142);
if( IKabs(((4.05305793363992e-6)+((npy*x143))+(((1.1353103455574e-5)*x138*x142))+((sj3*x136*x139))+(((-1.0)*sj5*x138*x141))+(((0.27166276346454)*sj3))+((cj5*x135*x141))+(((3.09934239746129e-7)*cj3))+((x136*x137))+(((-1.0)*sj3*x135*x136))+(((2.34192037465222)*x145))+((npx*x144))+((sj5*x140*x141))+(((-1.0)*cj5*x139*x141))+(((-1.1353103455574e-5)*x146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.836065573750843)+((x140*x144))+(((-2.34192037465222)*x138*x142))+(((-1.0)*x138*x144))+(((-1.0)*cj3*x136*x139))+(((3.09934239746129e-7)*sj3))+((npy*sj3*x136))+((x135*x143))+(((-0.27166276346454)*cj3))+(((-1.0)*x139*x143))+(((1.1353103455574e-5)*x145))+(((2.34192037465222)*x146))+((cj3*x135*x136))+(((-1.0)*npx*sj5*x141))+(((-2.34192037465222)*cj5*x137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((4.05305793363992e-6)+((npy*x143))+(((1.1353103455574e-5)*x138*x142))+((sj3*x136*x139))+(((-1.0)*sj5*x138*x141))+(((0.27166276346454)*sj3))+((cj5*x135*x141))+(((3.09934239746129e-7)*cj3))+((x136*x137))+(((-1.0)*sj3*x135*x136))+(((2.34192037465222)*x145))+((npx*x144))+((sj5*x140*x141))+(((-1.0)*cj5*x139*x141))+(((-1.1353103455574e-5)*x146))))+IKsqr(((-0.836065573750843)+((x140*x144))+(((-2.34192037465222)*x138*x142))+(((-1.0)*x138*x144))+(((-1.0)*cj3*x136*x139))+(((3.09934239746129e-7)*sj3))+((npy*sj3*x136))+((x135*x143))+(((-0.27166276346454)*cj3))+(((-1.0)*x139*x143))+(((1.1353103455574e-5)*x145))+(((2.34192037465222)*x146))+((cj3*x135*x136))+(((-1.0)*npx*sj5*x141))+(((-2.34192037465222)*cj5*x137))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((4.05305793363992e-6)+((npy*x143))+(((1.1353103455574e-5)*x138*x142))+((sj3*x136*x139))+(((-1.0)*sj5*x138*x141))+(((0.27166276346454)*sj3))+((cj5*x135*x141))+(((3.09934239746129e-7)*cj3))+((x136*x137))+(((-1.0)*sj3*x135*x136))+(((2.34192037465222)*x145))+((npx*x144))+((sj5*x140*x141))+(((-1.0)*cj5*x139*x141))+(((-1.1353103455574e-5)*x146))), ((-0.836065573750843)+((x140*x144))+(((-2.34192037465222)*x138*x142))+(((-1.0)*x138*x144))+(((-1.0)*cj3*x136*x139))+(((3.09934239746129e-7)*sj3))+((npy*sj3*x136))+((x135*x143))+(((-0.27166276346454)*cj3))+(((-1.0)*x139*x143))+(((1.1353103455574e-5)*x145))+(((2.34192037465222)*x146))+((cj3*x135*x136))+(((-1.0)*npx*sj5*x141))+(((-2.34192037465222)*cj5*x137))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x147=IKcos(j2);
IkReal x148=IKsin(j2);
IkReal x149=(cj5*npy);
IkReal x150=((0.427)*cj3);
IkReal x151=(sj0*sj5);
IkReal x152=(npx*sj5);
IkReal x153=(cj5*sj0);
IkReal x154=((1.0)*cj0);
IkReal x155=((2.0)*px*sj0);
IkReal x156=(pp*x154);
IkReal x157=(cj3*x147);
IkReal x158=(cj3*x148);
IkReal x159=(sj3*x147);
IkReal x160=(sj3*x148);
IkReal x161=((2.0)*cj0*py);
evalcond[0]=((0.116)+(((-0.427)*x160))+(((0.357)*cj3))+(((-2.07e-6)*x158))+(((-2.07e-6)*x159))+x152+x149+((x147*x150)));
evalcond[1]=((0.34311500000447)+(((-1.47798e-6)*x148))+(((0.0990640000017802)*x157))+(((-1.1302e-7)*x159))+(((-1.1302e-7)*x158))+(((3.0702e-7)*sj3))+(((-0.0990640000017802)*x160))+(((-1.0)*pp))+(((0.082824)*cj3))+(((0.304878)*x147)));
evalcond[2]=((-4.3e-7)+(((-1.0)*rxp0_1*sj5*x154))+(((-1.0)*cj5*rxp1_1*x154))+(((2.07e-6)*x160))+(((-2.07e-6)*x157))+(((-0.357)*sj3))+(((-0.427)*x159))+((rxp1_0*x153))+((rxp0_0*x151))+(((-1.0)*x148*x150)));
evalcond[3]=((-0.032712)+(((-1.0)*r10*sj5*x156))+(((0.120414)*x160))+(((-2.0)*npx*px*x151))+((x149*x161))+((x152*x161))+(((-1.0)*cj5*r11*x156))+(((5.8374e-7)*x159))+(((5.8374e-7)*x158))+((pp*r00*x151))+(((-0.100674)*cj3))+(((-1.0)*x149*x155))+((pp*r01*x153))+(((-0.120414)*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x162=(cj3*cj5);
IkReal x163=(r21*sj2);
IkReal x164=((7.09219858156028)*rxp1_2);
IkReal x165=(cj2*sj3);
IkReal x166=(r20*sj5);
IkReal x167=(sj2*sj3);
IkReal x168=(cj2*cj3);
IkReal x169=(cj3*sj2);
IkReal x170=((7.09219858156028)*rxp0_2*sj5);
if( IKabs((((x162*x163))+((cj5*r21*x165))+((x167*x170))+((cj5*x164*x167))+((x166*x169))+(((-1.0)*cj2*x162*x164))+((x165*x166))+(((-1.0)*x168*x170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x164*x165))+(((-1.0)*x166*x168))+(((-1.0)*sj2*x162*x164))+((x166*x167))+(((-1.0)*cj2*r21*x162))+(((-1.0)*x169*x170))+((cj5*sj3*x163))+(((-1.0)*x165*x170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x162*x163))+((cj5*r21*x165))+((x167*x170))+((cj5*x164*x167))+((x166*x169))+(((-1.0)*cj2*x162*x164))+((x165*x166))+(((-1.0)*x168*x170))))+IKsqr(((((-1.0)*cj5*x164*x165))+(((-1.0)*x166*x168))+(((-1.0)*sj2*x162*x164))+((x166*x167))+(((-1.0)*cj2*r21*x162))+(((-1.0)*x169*x170))+((cj5*sj3*x163))+(((-1.0)*x165*x170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x162*x163))+((cj5*r21*x165))+((x167*x170))+((cj5*x164*x167))+((x166*x169))+(((-1.0)*cj2*x162*x164))+((x165*x166))+(((-1.0)*x168*x170))), ((((-1.0)*cj5*x164*x165))+(((-1.0)*x166*x168))+(((-1.0)*sj2*x162*x164))+((x166*x167))+(((-1.0)*cj2*r21*x162))+(((-1.0)*x169*x170))+((cj5*sj3*x163))+(((-1.0)*x165*x170))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x171=IKcos(j1);
IkReal x172=IKsin(j1);
IkReal x173=(sj0*sj5);
IkReal x174=((2.0)*npx);
IkReal x175=(cj5*sj0);
IkReal x176=(cj0*cj5);
IkReal x177=(cj2*cj3);
IkReal x178=((1.0)*cj3);
IkReal x179=((0.116)*sj3);
IkReal x180=(sj2*sj3);
IkReal x181=((2.0)*npy);
IkReal x182=((0.116)*cj3);
IkReal x183=(cj5*r21);
IkReal x184=(cj3*sj2);
IkReal x185=(cj0*px);
IkReal x186=((0.0613049999959)*cj3);
IkReal x187=((1.66802e-6)*cj3);
IkReal x188=(cj0*sj5);
IkReal x189=(r20*sj5);
IkReal x190=((4.3e-7)*x172);
IkReal x191=(cj2*x171);
IkReal x192=((0.141)*x171);
IkReal x193=(sj2*x172);
IkReal x194=(sj3*x171);
IkReal x195=(sj3*x172);
IkReal x196=(cj2*x172);
IkReal x197=(sj2*x171);
IkReal x198=(cj3*x171);
IkReal x199=(cj3*x172);
IkReal x200=(sj3*x191);
evalcond[0]=((((-1.0)*x178*x193))+(((-1.0)*x171*x180))+x183+x189+((x171*x177))+(((-1.0)*cj2*x195)));
evalcond[1]=((((0.141)*x200))+((cj5*rxp1_2))+(((0.141)*x172*x177))+((x184*x192))+((rxp0_2*sj5))+(((-0.141)*x172*x180)));
evalcond[2]=((((-1.0)*x178*x197))+((x172*x180))+((r01*x176))+((r00*x188))+((r10*x173))+(((-1.0)*x172*x177))+(((-1.0)*x200))+((r11*x175)));
evalcond[3]=(((rxp1_1*x175))+(((-1.0)*x180*x192))+((rxp1_0*x176))+((rxp0_0*x188))+((rxp0_1*x173))+(((-0.141)*cj2*x195))+(((-0.141)*x172*x184))+((x177*x192)));
evalcond[4]=((((4.3e-7)*x171*x184))+(((4.3e-7)*x200))+(((2.07e-6)*x172))+(((0.357)*x191))+(((0.116)*x171*x177))+(((-1.0)*x180*x190))+(((-1.0)*pz))+(((-0.357)*x193))+(((-1.0)*x182*x193))+(((0.427)*x171))+(((-1.0)*x179*x197))+(((-1.0)*x179*x196))+((x177*x190)));
evalcond[5]=((((2.07e-6)*x171))+((x179*x193))+(((-0.427)*x172))+(((-1.0)*x185))+(((-1.0)*x184*x190))+(((-4.3e-7)*x171*x180))+(((-1.0)*py*sj0))+(((-0.357)*x196))+(((-0.357)*x197))+(((-0.116)*x172*x177))+(((-1.0)*cj2*sj3*x190))+(((-1.0)*x182*x197))+(((4.3e-7)*x171*x177))+(((-1.0)*x179*x191)));
evalcond[6]=((((-0.304878)*x198))+(((-0.304878)*x195))+(((-1.0)*cj5*pz*x181))+(((0.082824)*x193))+(((-1.47798e-6)*x199))+(((0.0484549999955302)*x171*x180))+(((-8.4746e-7)*x172))+(((1.66802e-6)*x171*x184))+(((-1.86754e-6)*x172*x177))+(((-0.0990639999982198)*x171))+(((-3.0702e-7)*x197))+(((-3.0702e-7)*x196))+(((-0.082824)*x191))+((pp*x189))+((pp*x183))+(((-1.0)*pz*sj5*x174))+(((-0.30335299999553)*x171*x177))+(((1.47798e-6)*x194))+(((-0.3162029999959)*cj2*x195))+(((1.86754e-6)*x172*x180))+(((-0.0613049999959)*x172*x184))+(((1.66802e-6)*x200)));
evalcond[7]=((((-1.0)*py*x173*x174))+(((-0.304878)*x194))+((pp*r00*x188))+(((-1.86754e-6)*x171*x177))+(((0.082824)*x196))+(((0.082824)*x197))+(((-1.47798e-6)*x195))+(((-1.47798e-6)*x198))+(((-1.0)*sj5*x174*x185))+((pp*r11*x175))+((pp*r10*x173))+(((-1.66802e-6)*x172*x184))+(((-1.0)*px*x176*x181))+(((0.30335299999553)*x172*x177))+(((-1.66802e-6)*cj2*x195))+(((1.86754e-6)*x171*x180))+(((-8.4746e-7)*x171))+(((-0.0613049999959)*x171*x184))+(((3.0702e-7)*x193))+(((-0.3162029999959)*x200))+(((-3.0702e-7)*x191))+((pp*r01*x176))+(((0.304878)*x199))+(((-0.0484549999955302)*x172*x180))+(((0.0990639999982198)*x172))+(((-1.0)*py*x175*x181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}
    }

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cr5 (9ad6937a6563413c350938370112050a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
